{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";var supportsFullscreenAPI=function supportsFullscreenAPI(element){return'requestFullscreen'in element;};var supportsWebkitFullscreenAPI=function supportsWebkitFullscreenAPI(element){return'webkitEnterFullScreen'in element;};var supportsMsFullscreenAPI=function supportsMsFullscreenAPI(element){return'msRequestFullscreen'in element;};var supportsWebkitFullscreenChangeEvent=function supportsWebkitFullscreenChangeEvent(){return supportsEvent('video','webkitfullscreenchange');};function addEventListener(element,eventName,listener){element.addEventListener(eventName,listener);return function(){return element.removeEventListener(eventName,listener);};}var supportsEvent=function supportsEvent(elementName,eventName){var element=document.createElement(elementName);element.setAttribute('on'+eventName,'return;');return typeof element['on'+eventName]==='function';};export function requestFullscreen(_x){return _requestFullscreen.apply(this,arguments);}function _requestFullscreen(){_requestFullscreen=_asyncToGenerator(function*(element){if(supportsFullscreenAPI(element)){return element.requestFullscreen();}else if(supportsWebkitFullscreenAPI(element)){var _element$webkitEnterF;(_element$webkitEnterF=element['webkitEnterFullScreen'])==null?void 0:_element$webkitEnterF.call(element);}else if(supportsMsFullscreenAPI(element)){var _element$msRequestFul;(_element$msRequestFul=element['msRequestFullscreen'])==null?void 0:_element$msRequestFul.call(element);}else{throw new Error('Fullscreen not supported');}});return _requestFullscreen.apply(this,arguments);}export function exitFullscreen(_x2){return _exitFullscreen.apply(this,arguments);}function _exitFullscreen(){_exitFullscreen=_asyncToGenerator(function*(element){if(supportsFullscreenAPI(element)){return document.exitFullscreen();}else if(supportsWebkitFullscreenAPI(element)){var _element$webkitExitFu;(_element$webkitExitFu=element['webkitExitFullScreen'])==null?void 0:_element$webkitExitFu.call(element);}else if(supportsMsFullscreenAPI(element)){var _document$msExitFulls,_document;(_document$msExitFulls=(_document=document)['msExitFullscreen'])==null?void 0:_document$msExitFulls.call(_document);}else{throw new Error('Fullscreen not supported');}});return _exitFullscreen.apply(this,arguments);}export function addFullscreenListener(element,callback){if(supportsFullscreenAPI(element)){return addEventListener(element,'fullscreenchange',function(event){return callback(document.fullscreenElement===event.target);});}else if(supportsWebkitFullscreenAPI(element)&&supportsWebkitFullscreenChangeEvent()){return addEventListener(element,'webkitfullscreenchange',function(event){return callback(document['webkitFullscreenElement']===event.target);});}else if(supportsWebkitFullscreenAPI(element)){var removeBeginListener=addEventListener(element,'webkitbeginfullscreen',function(){return callback(true);});var removeEndListener=addEventListener(element,'webkitendfullscreen',function(){return callback(false);});return function(){removeBeginListener();removeEndListener();};}else if(supportsMsFullscreenAPI(element)){return addEventListener(document,'MSFullscreenChange',function(event){return callback(document['msFullscreenElement']===event.target);});}else{return function(){};}}","map":{"version":3,"names":["supportsFullscreenAPI","element","supportsWebkitFullscreenAPI","supportsMsFullscreenAPI","supportsWebkitFullscreenChangeEvent","supportsEvent","addEventListener","eventName","listener","removeEventListener","elementName","document","createElement","setAttribute","requestFullscreen","_x","_requestFullscreen","apply","arguments","_asyncToGenerator","_element$webkitEnterF","call","_element$msRequestFul","Error","exitFullscreen","_x2","_exitFullscreen","_element$webkitExitFu","_document$msExitFulls","_document","addFullscreenListener","callback","event","fullscreenElement","target","removeBeginListener","removeEndListener"],"sources":["../src/FullscreenUtils.web.ts"],"sourcesContent":["/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'requestFullscreen' in element;\n\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'webkitEnterFullScreen' in element;\n\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'msRequestFullscreen' in element;\n\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = (): boolean =>\n  supportsEvent('video', 'webkitfullscreenchange');\n\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(\n  element: Document | HTMLElement,\n  eventName: string,\n  listener: EventListenerOrEventListenerObject\n): () => any {\n  element.addEventListener(eventName, listener);\n  return () => element.removeEventListener(eventName, listener);\n}\n\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName: string, eventName: string): boolean => {\n  // Detect if the browser supports the event by attempting to add a handler\n  // attribute for that event to the provided element. If the event is supported\n  // then the browser will accept the attribute and report the type of the\n  // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n  const element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element['on' + eventName] === 'function';\n};\n\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return element.requestFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitEnterFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['msRequestFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Switches a video element out of fullscreen.\n */\n\nexport async function exitFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return document.exitFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitExitFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    document['msExitFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(\n  element: HTMLVideoElement,\n  callback: (isFullscreen: boolean) => void\n): () => any {\n  if (supportsFullscreenAPI(element)) {\n    // Used by browsers that support the official spec\n    return addEventListener(element, 'fullscreenchange', (event) =>\n      callback(document.fullscreenElement === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    // Used by Safari on macOS\n    return addEventListener(element, 'webkitfullscreenchange', (event) =>\n      callback(document['webkitFullscreenElement'] === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // Used by Safari on iOS\n    const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () =>\n      callback(true)\n    );\n    const removeEndListener = addEventListener(element, 'webkitendfullscreen', () =>\n      callback(false)\n    );\n    return () => {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    // Used by IE11\n    return addEventListener(document, 'MSFullscreenChange', (event) =>\n      callback(document['msFullscreenElement'] === event.target)\n    );\n  } else {\n    return () => {};\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}