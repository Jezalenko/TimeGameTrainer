{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{EventEmitter,Platform,UnavailabilityError}from'expo-modules-core';import{PlaybackMixin,assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getUnloadedStatus}from\"../AV\";import ExponentAV from\"../ExponentAV\";import{throwIfAudioIsDisabled}from\"./AudioAvailability\";export var Sound=function(){function Sound(){var _this=this;_classCallCheck(this,Sound);this._loaded=false;this._loading=false;this._key=null;this._lastStatusUpdate=null;this._lastStatusUpdateTime=null;this._subscriptions=[];this._eventEmitter=new EventEmitter(ExponentAV);this._coalesceStatusUpdatesInMillis=100;this._onPlaybackStatusUpdate=null;this._onMetadataUpdate=null;this._onAudioSampleReceived=null;this._internalStatusUpdateCallback=function(_ref){var key=_ref.key,status=_ref.status;if(_this._key===key){_this._callOnPlaybackStatusUpdateForNewStatus(status);}};this._internalMetadataUpdateCallback=function(_ref2){var key=_ref2.key,metadata=_ref2.metadata;if(_this._key===key){_this._onMetadataUpdate==null?void 0:_this._onMetadataUpdate(metadata);}};this._internalErrorCallback=function(_ref3){var key=_ref3.key,error=_ref3.error;if(_this._key===key){_this._errorCallback(error);}};this._errorCallback=function(error){_this._clearSubscriptions();_this._loaded=false;_this._key=null;_this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));};this.getStatusAsync=_asyncToGenerator(function*(){if(_this._loaded){return _this._performOperationAndHandleStatusAsync(function(){return ExponentAV.getStatusForSound(_this._key);});}var status=getUnloadedStatus();_this._callOnPlaybackStatusUpdateForNewStatus(status);return status;});}_createClass(Sound,[{key:\"_callOnPlaybackStatusUpdateForNewStatus\",value:function _callOnPlaybackStatusUpdateForNewStatus(status){var shouldDismissBasedOnCoalescing=this._lastStatusUpdateTime&&JSON.stringify(status)===this._lastStatusUpdate&&Date.now()-this._lastStatusUpdateTime.getTime()<this._coalesceStatusUpdatesInMillis;if(this._onPlaybackStatusUpdate!=null&&!shouldDismissBasedOnCoalescing){this._onPlaybackStatusUpdate(status);this._lastStatusUpdateTime=new Date();this._lastStatusUpdate=JSON.stringify(status);}}},{key:\"_performOperationAndHandleStatusAsync\",value:function(){var _performOperationAndHandleStatusAsync2=_asyncToGenerator(function*(operation){throwIfAudioIsDisabled();if(this._loaded){var status=yield operation();this._callOnPlaybackStatusUpdateForNewStatus(status);return status;}else{throw new Error('Cannot complete operation because sound is not loaded.');}});function _performOperationAndHandleStatusAsync(_x){return _performOperationAndHandleStatusAsync2.apply(this,arguments);}return _performOperationAndHandleStatusAsync;}()},{key:\"_updateAudioSampleReceivedCallback\",value:function _updateAudioSampleReceivedCallback(){if(global.__EXAV_setOnAudioSampleReceivedCallback==null){if(Platform.OS==='ios'||Platform.OS==='android'){console.warn('expo-av: Failed to set up Audio Sample Buffer callback. '+\"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \"+'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');return;}else{throw new UnavailabilityError('expo-av','setOnAudioSampleReceived');}}if(this._key==null){throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');}if(typeof this._key!=='number'){throw new Error(\"Cannot set Audio Sample Buffer callback when Sound instance key is of type \"+typeof this._key+\"! (expected: number)\");}global.__EXAV_setOnAudioSampleReceivedCallback(this._key,this._onAudioSampleReceived);}},{key:\"_subscribeToNativeEvents\",value:function _subscribeToNativeEvents(){if(this._loaded){this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus',this._internalStatusUpdateCallback),this._eventEmitter.addListener('didUpdateMetadata',this._internalMetadataUpdateCallback));this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError',this._internalErrorCallback));}}},{key:\"_clearSubscriptions\",value:function _clearSubscriptions(){this._subscriptions.forEach(function(e){return e.remove();});this._subscriptions=[];}},{key:\"setOnPlaybackStatusUpdate\",value:function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}},{key:\"setOnMetadataUpdate\",value:function setOnMetadataUpdate(onMetadataUpdate){this._onMetadataUpdate=onMetadataUpdate;}},{key:\"setOnAudioSampleReceived\",value:function setOnAudioSampleReceived(callback){this._onAudioSampleReceived=callback;if(this._key!=null){this._updateAudioSampleReceivedCallback();}}},{key:\"loadAsync\",value:function(){var _loadAsync=_asyncToGenerator(function*(source){var _this2=this;var initialStatus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var downloadFirst=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;throwIfAudioIsDisabled();if(this._loading){throw new Error('The Sound is already loading.');}if(!this._loaded){this._loading=true;var _yield$getNativeSourc=yield getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst),nativeSource=_yield$getNativeSourc.nativeSource,fullInitialStatus=_yield$getNativeSourc.fullInitialStatus;return new Promise(function(resolve,reject){var loadSuccess=function loadSuccess(result){var _result=_slicedToArray(result,2),key=_result[0],status=_result[1];_this2._key=key;_this2._loaded=true;_this2._loading=false;_this2._subscribeToNativeEvents();_this2._callOnPlaybackStatusUpdateForNewStatus(status);resolve(status);};var loadError=function loadError(error){_this2._loading=false;reject(error);};ExponentAV.loadForSound(nativeSource,fullInitialStatus).then(loadSuccess).catch(loadError);});}else{throw new Error('The Sound is already loaded.');}});function loadAsync(_x2){return _loadAsync.apply(this,arguments);}return loadAsync;}()},{key:\"unloadAsync\",value:function(){var _unloadAsync=_asyncToGenerator(function*(){if(this._loaded){this._loaded=false;var key=this._key;this._key=null;var status=yield ExponentAV.unloadForSound(key);this._callOnPlaybackStatusUpdateForNewStatus(status);this._clearSubscriptions();return status;}else{return this.getStatusAsync();}});function unloadAsync(){return _unloadAsync.apply(this,arguments);}return unloadAsync;}()},{key:\"setStatusAsync\",value:function(){var _setStatusAsync=_asyncToGenerator(function*(status){var _this3=this;assertStatusValuesInBounds(status);return this._performOperationAndHandleStatusAsync(function(){return ExponentAV.setStatusForSound(_this3._key,status);});});function setStatusAsync(_x3){return _setStatusAsync.apply(this,arguments);}return setStatusAsync;}()},{key:\"replayAsync\",value:function(){var _replayAsync=_asyncToGenerator(function*(){var _this4=this;var status=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(status.positionMillis&&status.positionMillis!==0){throw new Error('Requested position after replay has to be 0.');}return this._performOperationAndHandleStatusAsync(function(){return ExponentAV.replaySound(_this4._key,_objectSpread(_objectSpread({},status),{},{positionMillis:0,shouldPlay:true}));});});function replayAsync(){return _replayAsync.apply(this,arguments);}return replayAsync;}()}]);return Sound;}();Sound.create=function(){var _ref5=_asyncToGenerator(function*(source){var initialStatus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var onPlaybackStatusUpdate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var downloadFirst=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");return Sound.createAsync(source,initialStatus,onPlaybackStatusUpdate,downloadFirst);});return function(_x4){return _ref5.apply(this,arguments);};}();Sound.createAsync=function(){var _ref6=_asyncToGenerator(function*(source){var initialStatus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var onPlaybackStatusUpdate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var downloadFirst=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var sound=new Sound();sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);var status=yield sound.loadAsync(source,initialStatus,downloadFirst);return{sound:sound,status:status};});return function(_x5){return _ref6.apply(this,arguments);};}();Object.assign(Sound.prototype,PlaybackMixin);","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","throwIfAudioIsDisabled","Sound","_this","_classCallCheck","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","_internalStatusUpdateCallback","_ref","key","status","_callOnPlaybackStatusUpdateForNewStatus","_internalMetadataUpdateCallback","_ref2","metadata","_internalErrorCallback","_ref3","error","_errorCallback","_clearSubscriptions","getStatusAsync","_asyncToGenerator","_performOperationAndHandleStatusAsync","getStatusForSound","_createClass","value","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","_performOperationAndHandleStatusAsync2","operation","Error","_x","apply","arguments","_updateAudioSampleReceivedCallback","global","__EXAV_setOnAudioSampleReceivedCallback","OS","console","warn","_subscribeToNativeEvents","push","addListener","forEach","e","remove","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","_loadAsync","source","_this2","initialStatus","length","undefined","downloadFirst","_yield$getNativeSourc","nativeSource","fullInitialStatus","Promise","resolve","reject","loadSuccess","result","_result","_slicedToArray","loadError","loadForSound","then","catch","loadAsync","_x2","_unloadAsync","unloadForSound","unloadAsync","_setStatusAsync","_this3","setStatusForSound","setStatusAsync","_x3","_replayAsync","_this4","positionMillis","replaySound","_objectSpread","shouldPlay","replayAsync","create","_ref5","createAsync","_x4","_ref6","sound","_x5","Object","assign","prototype"],"sources":["../../src/Audio/Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}