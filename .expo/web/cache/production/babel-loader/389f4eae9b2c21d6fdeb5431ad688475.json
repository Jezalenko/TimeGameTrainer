{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import*as React from'react';import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import Image from\"react-native-web/dist/exports/Image\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getNativeSourceFromSource,getUnloadedStatus,PlaybackMixin}from\"./AV\";import ExpoVideoManager from\"./ExpoVideoManager\";import ExponentAV from\"./ExponentAV\";import ExponentVideo from\"./ExponentVideo\";import{ResizeMode}from\"./Video.types\";var _STYLES=StyleSheet.create({base:{overflow:'hidden'},poster:{position:'absolute',left:0,top:0,right:0,bottom:0,resizeMode:'contain'},video:{position:'absolute',left:0,top:0,right:0,bottom:0}});var ExpoVideoManagerConstants=ExpoVideoManager;var ExpoVideoViewManager=ExpoVideoManager;var Video=function(_React$Component){_inherits(Video,_React$Component);var _super=_createSuper(Video);function Video(props){var _this;_classCallCheck(this,Video);_this=_super.call(this,props);_this._nativeRef=React.createRef();_this._onPlaybackStatusUpdate=null;_this._handleNewStatus=function(status){if(_this.state.showPoster&&status.isLoaded&&(status.isPlaying||status.positionMillis!==0)){_this.setState({showPoster:false});}if(_this.props.onPlaybackStatusUpdate){_this.props.onPlaybackStatusUpdate(status);}if(_this._onPlaybackStatusUpdate){_this._onPlaybackStatusUpdate(status);}};_this._performOperationAndHandleStatusAsync=function(){var _ref=_asyncToGenerator(function*(operation){var video=_this._nativeRef.current;if(!video){throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");}var handle=findNodeHandle(_this._nativeRef.current);var status=yield operation(handle);_this._handleNewStatus(status);return status;});return function(_x){return _ref.apply(this,arguments);};}();_this._setFullscreen=function(){var _ref2=_asyncToGenerator(function*(value){return _this._performOperationAndHandleStatusAsync(function(tag){return ExpoVideoViewManager.setFullscreen(tag,value);});});return function(_x2){return _ref2.apply(this,arguments);};}();_this.presentFullscreenPlayer=_asyncToGenerator(function*(){return _this._setFullscreen(true);});_this.dismissFullscreenPlayer=_asyncToGenerator(function*(){return _this._setFullscreen(false);});_this.getStatusAsync=_asyncToGenerator(function*(){return _this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.getStatusForVideo(tag);});});_this.loadAsync=function(){var _ref6=_asyncToGenerator(function*(source){var initialStatus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var downloadFirst=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var _yield$getNativeSourc=yield getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst),nativeSource=_yield$getNativeSourc.nativeSource,fullInitialStatus=_yield$getNativeSourc.fullInitialStatus;return _this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.loadForVideo(tag,nativeSource,fullInitialStatus);});});return function(_x3){return _ref6.apply(this,arguments);};}();_this.unloadAsync=_asyncToGenerator(function*(){return _this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.unloadForVideo(tag);});});_this.setStatusAsync=function(){var _ref8=_asyncToGenerator(function*(status){assertStatusValuesInBounds(status);return _this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.setStatusForVideo(tag,status);});});return function(_x4){return _ref8.apply(this,arguments);};}();_this.replayAsync=_asyncToGenerator(function*(){var status=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(status.positionMillis&&status.positionMillis!==0){throw new Error('Requested position after replay has to be 0.');}return _this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.replayVideo(tag,_objectSpread(_objectSpread({},status),{},{positionMillis:0,shouldPlay:true}));});});_this._nativeOnPlaybackStatusUpdate=function(event){_this._handleNewStatus(event.nativeEvent);};_this._nativeOnLoadStart=function(){if(_this.props.onLoadStart){_this.props.onLoadStart();}};_this._nativeOnLoad=function(event){if(_this.props.onLoad){_this.props.onLoad(event.nativeEvent);}_this._handleNewStatus(event.nativeEvent);};_this._nativeOnError=function(event){var error=event.nativeEvent.error;if(_this.props.onError){_this.props.onError(error);}_this._handleNewStatus(getUnloadedStatus(error));};_this._nativeOnReadyForDisplay=function(event){if(_this.props.onReadyForDisplay){_this.props.onReadyForDisplay(event.nativeEvent);}};_this._nativeOnFullscreenUpdate=function(event){if(_this.props.onFullscreenUpdate){_this.props.onFullscreenUpdate(event.nativeEvent);}};_this._renderPoster=function(){var _this$props$PosterCom;var PosterComponent=(_this$props$PosterCom=_this.props.PosterComponent)!=null?_this$props$PosterCom:Image;return _this.props.usePoster&&_this.state.showPoster?React.createElement(PosterComponent,{style:[_STYLES.poster,_this.props.posterStyle],source:_this.props.posterSource}):null;};_this.state={showPoster:!!props.usePoster};return _this;}_createClass(Video,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){var nativeVideo=this._nativeRef.current;if(!nativeVideo)throw new Error(\"native video reference is not defined.\");nativeVideo.setNativeProps(nativeProps);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.unloadAsync().catch(function(){});}},{key:\"setOnPlaybackStatusUpdate\",value:function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}},{key:\"render\",value:function render(){var _this2=this;var source=getNativeSourceFromSource(this.props.source)||undefined;var nativeResizeMode=ExpoVideoManagerConstants.ScaleNone;if(this.props.resizeMode){var resizeMode=this.props.resizeMode;if(resizeMode===ResizeMode.STRETCH){nativeResizeMode=ExpoVideoManagerConstants.ScaleToFill;}else if(resizeMode===ResizeMode.CONTAIN){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFit;}else if(resizeMode===ResizeMode.COVER){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFill;}}var status=_objectSpread({},this.props.status);['progressUpdateIntervalMillis','positionMillis','shouldPlay','rate','shouldCorrectPitch','volume','isMuted','isLooping'].forEach(function(prop){if(prop in _this2.props){status[prop]=_this2.props[prop];}});var nativeProps=_objectSpread(_objectSpread({},omit(this.props,['source','onPlaybackStatusUpdate','usePoster','posterSource','posterStyle'].concat(_toConsumableArray(Object.keys(status))))),{},{style:StyleSheet.flatten([_STYLES.base,this.props.style]),videoStyle:StyleSheet.flatten([_STYLES.video,this.props.videoStyle]),source:source,resizeMode:nativeResizeMode,status:status,onStatusUpdate:this._nativeOnPlaybackStatusUpdate,onLoadStart:this._nativeOnLoadStart,onLoad:this._nativeOnLoad,onError:this._nativeOnError,onReadyForDisplay:this._nativeOnReadyForDisplay,onFullscreenUpdate:this._nativeOnFullscreenUpdate});return React.createElement(View,{style:nativeProps.style,pointerEvents:\"box-none\"},React.createElement(ExponentVideo,_objectSpread(_objectSpread({ref:this._nativeRef},nativeProps),{},{style:nativeProps.videoStyle})),this._renderPoster());}}]);return Video;}(React.Component);function omit(props,propNames){var copied=_objectSpread({},props);for(var propName of propNames){delete copied[propName];}return copied;}Object.assign(Video.prototype,PlaybackMixin);export default Video;","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_ref","_asyncToGenerator","operation","current","Error","handle","_x","apply","arguments","_setFullscreen","_ref2","value","tag","setFullscreen","_x2","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","_ref6","source","initialStatus","length","undefined","downloadFirst","_yield$getNativeSourc","nativeSource","fullInitialStatus","loadForVideo","_x3","unloadAsync","unloadForVideo","setStatusAsync","_ref8","setStatusForVideo","_x4","replayAsync","replayVideo","_objectSpread","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","_this$props$PosterCom","PosterComponent","usePoster","createElement","style","posterStyle","posterSource","_createClass","key","setNativeProps","nativeProps","nativeVideo","componentWillUnmount","catch","setOnPlaybackStatusUpdate","render","_this2","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","concat","_toConsumableArray","Object","keys","flatten","videoStyle","onStatusUpdate","pointerEvents","ref","Component","propNames","copied","propName","assign","prototype"],"sources":["../src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      videoStyle: StyleSheet.flatten([_STYLES.video, this.props.videoStyle]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}